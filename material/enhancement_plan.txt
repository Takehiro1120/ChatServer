＊＊＊実装の予定。基本は上に書かれている物からやっていくが、コマンドの実装は順不同。＊＊＊




・ChatServerクラスの作成
ChatServerクラスをクラス図を元に作成します。
処理内容は後回しで、概形だけ形成します。

・ChatCliendHandlerクラスの作成
実際のチャット機能の処理部分となるChatClientHandlerクラスをクラス図を元に作成します。
処理内容は後回しで、概形だけ形成します。

・ChatServerクラスの実装
ChatServerクラスのlistenメソッドは、
サーバを立ち上げ、無限ループを形成して参加するクライアントを待ちます。
誰かが参加してきたら、そのソケットと現在のクライアント群からハンドラーを形成し、
それをクライアント群に追加した後ハンドラーのstartメソッドをよびだします。
mainメソッドは自身のオブジェクトを作成し、このlistenメソッドを呼び出します。

・ChatClientHandlerの基本処理の実装
ChatClientHandlerのコンストラクタ、ゲッタ、セッタを実装します。
コンストラクタは「socket」と「clients」を設定し、「name」は"undefined<n>"（<n>には現在の参加人数が入る）
と設定してください。

・ChatClientHandlerのopenメソッドの実装
openメソッドはクライアントとのデータのやり取りを行うストリームを開くメソッドです。
BufferedReaderのinとBufferedWriterのoutをsocketからストリームを入手して設定します。

・ChatClientHandlerのreceaveメソッドの実装
receaveメソッドは、クライアントからデータを受け取るメソッドです。
inから1行読み込み、それに引数のnameを先頭につけて出力します。
また、返値は読み込んだ１行です。

・ChatClientHandlerのsendメソッドの実装
sendメソッドはクライアントにデータを送信するメソッドです。
outに引数のメッセージを書き込み、改行してください。
最後にストリームのフラッシュも必要です。

・ChatClietntHandlerのcloseメソッドの実装
closeメソッドはクライアントとの接続を切るメソッドです。
バッファとソケットを空にします。



・ChatClietntHandlerのrunメソッド実装
runメソッドには、まず接続時にそれを通知する機能が必要です。
その後、無限ループでreceaveメソッドを呼び出し、自身の書き込みを取得します。
" "で分けられた一つ目のワードがコマンド名になっているはずなので、
条件分岐でコマンド名ごとに既存の関数を適切に呼び出します。
もちろん、コマンド名が不正な場合それを通知する機能も必要です。



・postコマンドの実装
postコマンドを実行すると、自身を除く全員にメッセージを投稿します。
届くメッセージは「[投稿者]メッセージ」の形になります。

・byeコマンドの実装
byeコマンドを実行すると、クライアントがサーバから退出します。
退出時のメッセージの送信を行い、クライアント群から自身を削除します。
その後、スレッドを終了するようにします。

・nameコマンドの実装
nameコマンドを実行すると、クライアントの名前を変更されます。
クライアントのnameを引数の物に変更します。
しかし、サーバ内ですでにその名前が使われている場合は、変更を行わず
そのことを通知します。

・whoamiコマンドの実装
whoamiコマンドを実行すると、現在設定されている名前を返します。

・helpコマンドの実装
helpコマンドを実行すると、処理可能な命令の一覧を表示します。
新たなコマンドの実装を行う場合、このメッセージも追加する必要があります。

・usersコマンドの実装
usersコマンドを実行すると、現在チャットに参加しているメンバの名前を返します。
メンバの名前はコンマ区切りの1行で返され、さらにその名前は昇順にソートされています。

・tellコマンドの実装
tellコマンドを実行すると、指定した相手にのみメッセージを投稿することができます。
また、指定した相手が見つからない場合、そのことを通知します。

 





